---
title: "Lab 3: COVID-19"
subtitle: "Ecosystem Science and Sustainability 330"
author: 
  - name: Noah Goodhart
    email: noahwg@rams.colostate.edu
format: html
editor: visual
self-contained: TRUE
---

Question 1: How does easy access to historical and real-time environmental data shape our understanding of climate trends, resource management, and public health? What happens when this data disappears or becomes inaccessible?

Answer: Easy access to historical and real-time environmental data enhances climate models, informs conservation efforts, and supports early warning systems for disasters and disease outbreaks. When this data becomes inaccessible, it weakens scientific research, hampers policy decisions, and leaves communities more vulnerable to environmental risks.

Question 2:


Libraries

```{r}
library(tidyverse)
library(flextable)
library(zoo)
library(dplyr)
library(readr)
library(stringr)
library(ggplot2)
```

This is the url I am getting the data from.
```{r}
covid <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv")
```

Creating new objects.
```{r}
my.date <- as.Date("2022-02-01")

my.state <- "Colorado"
```

Here I made a new subset that limits the data to Colorado, plus adding 2 new columns, one for daily new cases, and daily new deaths.
```{r}
colorado_covid <- covid %>%
  filter(state == "Colorado") %>%  
  group_by(county) %>% 
  arrange(date, .by_group = TRUE) %>% 
  mutate(
    new_cases = cases - lag(cases, default = 0), 
    new_deaths = deaths - lag(deaths, default = 0) 
  ) %>%
  ungroup()
```

Using this code, I generated 2 tables. One with the 5 counties with the most cumulative cases, and the second one with the 5 most new cases. Below are the two tables for question 2.
```{r}
top_cumulative_cases <- colorado_covid %>%
  filter(date == my.date) %>%
  arrange(desc(cases)) %>%
  select(county, cases) %>%
  head(5)

top_new_cases <- colorado_covid %>%
  filter(date == my.date) %>%
  arrange(desc(new_cases)) %>%
  select(county, new_cases) %>%
  head(5)

top_cumulative_cases %>% flextable()
top_new_cases %>% flextable()
```
Question 3:

Here I added a 0 to the fips column and changed it to uppercase FIPS so it will match the population data's FIPS column. 
```{r}
colorado_covid <- colorado_covid %>%
  mutate(fips = str_pad(fips, width = 5, side = "left", pad = "0")) %>% 
  rename(FIPS = fips)
```

In this next step I am cleaning up population data, creating a 5 digit FIP variable, keeping only columns that have "2021" in their name.
```{r}
library(here)
population_data <- read.csv(here("data", "co-est2023-alldata.csv"))

population_clean <- population_data %>%
  mutate(
    STATE = str_pad(as.character(STATE), width = 2, side = "left", pad = "0"),
    COUNTY = str_pad(as.character(COUNTY), width = 3, side = "left", pad = "0"),
    FIPS = paste0(STATE, COUNTY)
  ) %>%
  select(FIPS, contains("NAME"), contains("2021")) %>%
  filter(substr(FIPS, 3, 5) != "000") 
```

Question 3.2:
The clean data now has a total of 19 columns, all with 2021 data. The columns range from estimates of population, change in population, births & deaths, migration statistics, to rates of change of the previous columns. The death columns are most likely impacted by the COVID pandemic, but the data in the population csv doesn't show COVID deaths compared to all others. 

Question 3.3:
The populations range from a population estimate, international migration, domestic migration, to net migration.

Question 3.4
Here I joined the two data frames by FIPS, then created new columns for Per Capita: cumulative cases, new cases, and new deaths.
```{r}
colorado_covid <- colorado_covid %>%
  left_join(population_clean, by = "FIPS")

colorado_covid <- colorado_covid %>% 
  mutate(
    per_capita_cumulative_cases = cases / POPESTIMATE2021,
    per_capita_new_cases = new_cases / POPESTIMATE2021,
    per_capita_new_deaths = new_deaths / POPESTIMATE2021
  )
```

Question 3.5

The first step is creating a new data frame just for Janurary 1st, 2021.
```{r}
covid_jan_1_2021 <- colorado_covid %>%
  filter(date == "2021-01-01")
```

The next step is creating a table with the top five counties with the most per capita cumulative cases with the data I calculated in the previous step.
```{r}
table_1 <- covid_jan_1_2021 %>%
  arrange(desc(per_capita_cumulative_cases)) %>%
  head(5) %>%
  select(county, per_capita_cumulative_cases) %>%
  flextable() %>%
  set_caption("Top 5 Colorado Counties with the most Cumulative Cases per Capita on 2021-01-01")
```

Then I will do the same for per capita new cases
```{r}
table_2 <- covid_jan_1_2021 %>% 
  arrange(desc(per_capita_new_cases)) %>% 
  head(5) %>% 
  select(county, per_capita_new_cases) %>% 
  flextable() %>% 
  set_caption("Top 5 Colorado Counties with the most New Cases per Capita on 2021-01-01")
```

Now we just need to view the tables
```{r}
table_1
table_2
```

Question 4:

First I have to create a value that is the last 14 days, December 18th through the 31st, and make it so each day is recorded, and not just those two dates.
```{r}
last_14_days <- seq(as.Date("2021-12-18"), as.Date("2021-12-31"), by = "day")
```

Then I have to make a new data frame from the Colorado Covid data frame with tjust the selected days.
```{r}
colorado_covid_last_14 <- colorado_covid %>%
  filter(date %in% last_14_days)
```

Then I have to group this new data frame by county, summarize the new cases, and calculate the new cases by 100,000

```{r}
county_cases_summary <- colorado_covid_last_14 %>%
  group_by(county) %>%
  summarize(
    total_new_cases = sum(new_cases, na.rm = TRUE),
    population = unique(POPESTIMATE2021),
    new_cases_per_100k = (total_new_cases / population) * 100000
  )
```

After that, I have to find out which counties are on the "watch list," and then list the top 5, and count how many "watch list" counties there are in Colorado. 

```{r}
watch_list_counties <- county_cases_summary %>%
  filter(new_cases_per_100k > 100) %>%
  arrange(desc(new_cases_per_100k)) 

top_watch_list_counties <- watch_list_counties %>% 
  head(5)

print(top_watch_list_counties)
count(watch_list_counties)
```
Question 5:

First I have to create a new data frame based on colorado_covid that only has 2021 dates. I'll group this data frame by county, and sum the death toll by county.
```{r}
covid_deaths_colorado_2021 <- colorado_covid %>%
  filter(date >= "2021-01-01" & date <= "2021-12-31") %>%
  group_by(county) %>%
  summarize(covid_deaths = sum(new_deaths, na.rm = TRUE))
```

Next I'm going to add the total deaths by county to the data frame with just the covid deaths. Then I will add a column that shows the ratio of covid deaths to total deaths.
```{r}
covid_deaths_with_total <- covid_deaths_colorado_2021 %>%
  left_join(colorado_covid %>%
              select(county, DEATHS2021) %>%
              distinct(), by = "county") %>%
  mutate(death_ratio = (covid_deaths / DEATHS2021) * 100)
```

Next I have to find the counties with a high (20% or more) death ratio.
```{r}
high_ratio_counties <- covid_deaths_with_total %>%
  filter(death_ratio >= 20) %>%
  arrange(desc(death_ratio))
```

Finally, I will create a plot showing all of these high ratio counties.
```{r}
ggplot(high_ratio_counties, aes(x = reorder(county, death_ratio), y = death_ratio)) +
  geom_bar(stat = "identity", fill = "lavender") +
  coord_flip() + 
  labs(
    title = str_wrap("Counties in Colorado where COVID Deaths Account for 20% or More of Total Deaths in 2021", width = 50),
    x = "County",
    y = "COVID Deaths (%)"
  ) +
  theme_minimal()
```
Question 6:

First I need to create a new data frame with the 4 states of interest, New York, Colorado, Alabama, and Ohio. Then I will group them by state and date, and sum all of the new cases by state.
```{r}
state_covid <- covid %>%
  filter(state %in% c("New York", "Colorado", "Alabama", "Ohio")) %>%  
  group_by(state, date) %>% 
  summarize(
    daily_new_cases = sum(cases, na.rm = TRUE),  # Sum daily new cases at the state level
    .groups = "drop"
  ) %>%
  arrange(state, date)
```

Next I need to calculate the 7-day rolling mean of the daily new cases.
```{r}
state_covid <- state_covid %>%
  group_by(state) %>%
  mutate(
    rolling_mean = rollmean(daily_new_cases, 7, fill = NA, align = "right") 
  ) %>%
  ungroup()
```

Then I will create a facet plot of the daily new cases and the 7-day rolling mean.
```{r}
library(scales)
state_covid$date <- as.Date(state_covid$date)
ggplot(state_covid, aes(x = date, y = daily_new_cases)) +
  geom_bar(stat = "identity", fill = "lightpink") +
  geom_line(aes(y = rolling_mean), color = "lightgreen", linewidth = 1) +  
  facet_wrap(~ state, scales = "free_x") +  
  theme_minimal() +
  labs(
    title = "Daily New COVID-19 Cases by State (With 7-Day Rolling Mean)",
    x = "Date",
    y = "Daily New Cases"
  ) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8),  
    plot.title = element_text(size = 14, hjust = 0.5),
    strip.text.x = element_text(size = 10)  
  ) +
  scale_x_date(
    breaks = "2 month",  
    labels = date_format("%b %d"),  
    expand = c(0.01, 0.01)  
  )
```

For the next part of the question, I will filter the population data to keep only the state totals. (Filter out the individual county's data.) I also renamed one of the columns to make the join work.

```{r}
state_population <- population_data %>%
  filter(COUNTY == "0") 

state_population <- state_population %>% 
  rename(state = STNAME)
```

Then I will join the the state population data to the state covid data.
```{r}
state_covid_population <- state_covid %>%
  left_join(state_population, by = "state") 
```

Next I have to calculate the new cases per capita, for each year.
```{r}
state_covid_population <- state_covid_population %>%
  mutate(
    new_cases_per_capita_2020 = daily_new_cases / POPESTIMATE2020,  
    new_cases_per_capita_2021 = daily_new_cases / POPESTIMATE2021,  
    new_cases_per_capita_2022 = daily_new_cases / POPESTIMATE2022  
  )
```

Then I need to calculate the 7-day rolling mean of new cases per capita for each year.
```{r}
state_covid_population <- state_covid_population %>%
  group_by(state) %>%
  arrange(date) %>%
  mutate(
    rolling_mean_per_capita_2020 = rollmean(new_cases_per_capita_2020, 7, fill = NA, align = "right"), 
    rolling_mean_per_capita_2021 = rollmean(new_cases_per_capita_2021, 7, fill = NA, align = "right"),  
    rolling_mean_per_capita_2022 = rollmean(new_cases_per_capita_2022, 7, fill = NA, align = "right")   
  ) %>%
  ungroup()
```

I then have to average the rolling mean values from all three years, to get one value. Finally, I will create a plot for the 7-day rolling mean per capita.
```{r}
state_covid_combined <- state_covid_population %>%
  select(state, date, rolling_mean_per_capita_2020, rolling_mean_per_capita_2021, rolling_mean_per_capita_2022) %>%
  mutate(combined_rolling_mean = rowMeans(select(., starts_with("rolling_mean_per_capita")), na.rm = TRUE))

ggplot(state_covid_combined, aes(x = date, y = combined_rolling_mean, color = state)) +
  geom_line(size = 1.2) +  
  labs(
    title = "7-Day Rolling Average of New COVID-19 Cases Per Capita (2020-2022)",
    x = "Date",
    y = "Combined Rolling Mean of New Cases Per Capita"
  ) +
  theme_minimal() +  
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    plot.title = element_text(size = 12, hjust = 0.5),  
    strip.text.x = element_text(size = 12)
  ) +
  scale_x_date(
    breaks = "1 month", 
    labels = scales::date_format("%b %d"), 
    expand = c(0.01, 0.01)  
  )
```



Scaling the 7-day rolling mean by the population shows that all of the states have relative similar data. At first, New York looked much worse than the others, but we can see in this adjusted graph, that was only because New York has such a large population. Without scaling the covid data by population, Alabama looks like it has the smallest 7-day rolling mean, but in the above graph, we can see that it has the worst value for a majority of the time.

Question 7:

First I will create a data frame for the new data I will be using.
```{r}
county_centroids <- read_csv("https://raw.githubusercontent.com/mikejohnson51/csu-ess-330/refs/heads/main/resources/county-centroids.csv")
```
Then, I will edit the raw covid data to make sure the FIPS line up correctly, and make sure the FIPS are both integers. This way I can join them with the county_centroids data frame.
```{r}
covid <- covid %>%
  mutate(FIPS = str_pad(as.character(fips), width = 5, side = "left", pad = "0"))

covid <- covid %>%
  mutate(fips = as.integer(fips))

county_centroids <- county_centroids %>%
  mutate(fips = as.integer(fips))

covid_with_centroids <- covid %>%
  left_join(county_centroids, by = "fips")

covid_with_centroids <- covid_with_centroids %>% 
  mutate(date = as.Date(date))
```

I then calculated the weighted mean center for each day.
```{r}
weighted_mean_center <- covid_with_centroids %>%
  mutate(weight = cases) %>%
  group_by(date) %>%
  summarize(
    Xcoord = sum(LON * weight, na.rm = TRUE) / sum(weight, na.rm = TRUE),
    Ycoord = sum(LAT * weight, na.rm = TRUE) / sum(weight, na.rm = TRUE),
    total_cases_day = sum(cases, na.rm = TRUE)
  )
```

I then did the same thing as above, but for each month.
```{r}
weighted_mean_center_monthly <- covid_with_centroids %>%
  mutate(
    weight = cases,
    year_month = format(date, "%Y-%m")  
  ) %>%
  group_by(year_month) %>%
  summarize(
    Xcoord = sum(LON * weight, na.rm = TRUE) / sum(weight, na.rm = TRUE),
    Ycoord = sum(LAT * weight, na.rm = TRUE) / sum(weight, na.rm = TRUE),
    total_cases_month = sum(cases, na.rm = TRUE)
  )
```

Finally, I created the plot.
```{r}
ggplot() +
  borders("state", fill = "gray90", colour = "white") + 
  geom_point(
    data = weighted_mean_center,
    aes(x = Xcoord, y = Ycoord, color = as.factor(format(date, "%Y-%m")), size = total_cases_day),
    alpha = 0.7  
  ) +
  scale_color_viridis_d(option = "plasma") + 
  scale_size(range = c(2, 8)) + 
  labs(
    title = "Weighted Mean Center of COVID-19 Cases in the USA",
    subtitle = "Colored by Month, Sized by Daily Total Cases",
    x = "Longitude",
    y = "Latitude",
    color = "Month",
    size = "Total Cases"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, hjust = 0.5),
    legend.position = "right"
  )
```


